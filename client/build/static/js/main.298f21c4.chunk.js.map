{"version":3,"sources":["context/authContext.js","hooks/http.hook.js","components/Loader.js","components/LinkList.js","pages/LinksPage.js","pages/CreatePage.js","components/LinkCard.js","pages/DetailPage.js","pages/AuthPage.js","hooks/message.hook.js","components/navBar.js","App.js","hooks/auth.hook.js","routes.js","serviceWorker.js","index.js"],"names":["noop","AuthContext","createContext","token","userId","login","logout","isAuthenticated","useHttp","useState","loading","setLoading","errors","setErrors","request","useCallback","url","a","method","body","headers","JSON","stringify","fetch","response","json","data","ok","Error","message","clearErrors","Loader","className","LinkList","links","length","map","link","index","key","_id","to","from","Date","date","toLocaleDateString","LinksPage","setLinks","useContext","getLinks","Authorization","useEffect","CreatePage","setLink","auth","history","useHistory","window","M","updateTextFields","handlerKeyPress","e","console","log","push","type","placeholder","value","onKeyPress","onChange","target","LinkCard","props","href","rel","clicks","DetailPage","linkId","useParams","id","getLink","AuthPage","text","toast","html","email","password","form","setForm","changeHandler","event","name","registerHandler","loginHandler","htmlFor","disabled","onClick","Navbar","preventDefault","App","setToken","ready","setReady","setUserId","jwToken","localStorage","setItem","removeItem","parse","getItem","useAuth","routes","path","exact","useRoutes","Provider","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.298f21c4.chunk.js","sourcesContent":["import {createContext} from 'react';\r\n\r\nfunction noop() {}\r\n\r\nexport const AuthContext = createContext({\r\n    token: null,\r\n    userId: null,\r\n    login: noop,\r\n    logout: noop,\r\n    isAuthenticated: false\r\n});","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [errors, setErrors] = useState(false);\r\n\r\n  const request = useCallback(\r\n    async (url, method = \"GET\", body = null, headers = {}) => {\r\n      setLoading(true);\r\n      try {\r\n        if (body) {\r\n          body = JSON.stringify(body);\r\n          headers = { ...headers, \"Content-Type\": \"application/json\" };\r\n          // 'Content-Type': 'application/x-www-form-urlencoded',\r\n        }\r\n\r\n        \r\n\r\n        const response = await fetch(url, { method, body, headers });\r\n        const data = await response.json();\r\n\r\n        if (!response.ok) {\r\n          throw new Error(data.message || \"Что то пошло не так\");\r\n        }\r\n        setLoading(false);\r\n        return data;\r\n      } catch (e) {\r\n        setLoading(false);\r\n        setErrors(e.message);\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearErrors = useCallback(() => {\r\n    setErrors(null);\r\n  }, []);\r\n\r\n  return { loading, request, errors, clearErrors };\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Loader = () => {\r\n  return (\r\n    <div className=\"loader\">\r\n      <div className=\"preloader-wrapper active\">\r\n        <div className=\"spinner-layer spinner-red-only\">\r\n          <div className=\"circle-clipper left\">\r\n            <div className=\"circle\"></div>\r\n          </div>\r\n          <div className=\"gap-patch\">\r\n            <div className=\"circle\"></div>\r\n          </div>\r\n          <div className=\"circle-clipper right\">\r\n            <div className=\"circle\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const LinkList = ({ links }) => {\r\n    if (!links.length) {\r\n        return <p className=\"center\">У вас пока нет ссылок</p>\r\n    }\r\n\r\n  return (\r\n    <table className=\"responsive-table striped\">\r\n      <thead>\r\n        <tr>\r\n          <th>№</th>\r\n          <th>Сокращенная</th>\r\n          <th>Оригинальная</th>\r\n          <th>Дата создания</th>\r\n          <th>Открыть</th>\r\n        </tr>\r\n      </thead>\r\n\r\n      <tbody>\r\n        {links.map((link, index) => {\r\n          return (\r\n            <tr key={link._id}>\r\n              <td>{index + 1}</td>\r\n              <td>{link.to}</td>\r\n              <td>{link.from}</td>\r\n              <td>{new Date(link.date).toLocaleDateString()}</td>\r\n              <td>\r\n                <Link to={`/detail/${link._id}`}>Открыть</Link>\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { AuthContext } from \"../context/authContext\";\r\nimport { useHttp } from \"../hooks/http.hook\";\r\nimport { useCallback } from \"react\";\r\nimport { Loader } from \"../components/Loader\";\r\nimport { LinkList } from \"../components/LinkList\";\r\n\r\nexport const LinksPage = () => {\r\n  const [links, setLinks] = useState([]);\r\n  const { request, loading } = useHttp();\r\n  const { token } = useContext(AuthContext);\r\n\r\n  const getLinks = useCallback(async () => {\r\n      try {\r\n        const data = await request(\"/api/link\", \"GET\", null, {\r\n            Authorization: `Bearer ${token}`\r\n          });\r\n          setLinks(data);\r\n      } catch (error) {\r\n          \r\n      }\r\n  }, [request, token]);\r\n\r\n  useEffect(() => {\r\n      getLinks()\r\n      \r\n  }, [getLinks])\r\n\r\n  if (loading) {\r\n      return <Loader/>\r\n  }\r\n\r\n  return (\r\n    <>\r\n        {!loading && <LinkList links={links}/>}\r\n    </>\r\n  );\r\n};\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { useHttp } from \"../hooks/http.hook\";\r\nimport { AuthContext } from \"../context/authContext\";\r\n\r\nexport const CreatePage = () => {\r\n  const [link, setLink] = useState(\"\");\r\n  const { request } = useHttp();\r\n  const auth = useContext(AuthContext);\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    window.M.updateTextFields();\r\n  }, []);\r\n\r\n  const handlerKeyPress = async e => {\r\n    try {\r\n      if (e.key === \"Enter\") {\r\n        console.log(auth.token);\r\n\r\n        const data = await request(\r\n          \"/api/link/generate\",\r\n          \"POST\",\r\n          { from: link },\r\n          { Authorization: `Bearer ${auth.token}` }\r\n        );\r\n        history.push(`/detail/${data.link._id}`);\r\n      }\r\n    } catch (error) {}\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col s8 offset-s2\">\r\n        <div className=\"input-field\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Вставьте ссылку\"\r\n            value={link}\r\n            onKeyPress={handlerKeyPress}\r\n            onChange={e => setLink(e.target.value)}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const LinkCard = props => {\r\n  const { link } = props;\r\n  return (\r\n    <>\r\n      <h1>Сведения о ссылке</h1>\r\n      <p>\r\n        Ваша ссылка: <a href={link.to} target=\"_blank\" rel=\"noopener noreferrer\">{link.to}</a>\r\n      </p>\r\n      <p>\r\n        Откуда: <a href={link.from} target=\"_blank\" rel=\"noopener noreferrer\">{link.from}</a>\r\n      </p>\r\n      <p>Количество кликов по ссылке: <strong>{link.clicks}</strong></p>\r\n      <p>Ссылка создана: <strong>{new Date(link.date).toLocaleDateString()}</strong> </p>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useState, useCallback } from \"react\";\r\nimport { useHttp } from \"../hooks/http.hook\";\r\nimport { useContext } from \"react\";\r\nimport { AuthContext } from \"../context/authContext\";\r\nimport { useEffect } from \"react\";\r\nimport { Loader } from \"../components/Loader\";\r\nimport { LinkCard } from \"../components/LinkCard\";\r\n\r\nexport const DetailPage = () => {\r\n  const [link, setLink] = useState(null);\r\n  const { token } = useContext(AuthContext);\r\n  const { request, loading } = useHttp();\r\n  const linkId = useParams().id;\r\n\r\n  const getLink = useCallback(async () => {\r\n    try {\r\n      const data = await request(`/api/link/${linkId}`, \"GET\", null, {\r\n        Authorization: `Bearer ${token}`\r\n      });\r\n      setLink(data);\r\n    } catch (error) {}\r\n  }, [request, linkId, token]);\r\n\r\n  useEffect(() => {\r\n    getLink();\r\n  }, [getLink]);\r\n\r\n  if (loading) {\r\n    return <Loader />;\r\n  }\r\n\r\n  return (<>\r\n    {link && !loading && <LinkCard link={link}/>}\r\n  </>);\r\n};\r\n","import React from \"react\";\r\nimport { useState, useEffect, useContext } from \"react\";\r\nimport { useHttp } from \"../hooks/http.hook\";\r\nimport { useMessage } from \"../hooks/message.hook\";\r\nimport { AuthContext } from \"../context/authContext\";\r\n\r\nexport const AuthPage = () => {\r\n  const message = useMessage();\r\n  const { loading, request, errors, clearErrors } = useHttp();\r\n  const [form, setForm] = useState({\r\n    email: \"\",\r\n    password: \"\"\r\n  });\r\n\r\n  const auth = useContext(AuthContext);\r\n\r\n  useEffect(() => {\r\n    message(errors);\r\n    clearErrors();\r\n  }, [errors, message, clearErrors]);\r\n\r\n  useEffect(() => {\r\n    window.M.updateTextFields();\r\n  }, [])\r\n\r\n  const changeHandler = event => {\r\n    setForm({ ...form, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  const registerHandler = async () => {\r\n    try {\r\n      const data = await request(\"/api/auth/register\", \"POST\", { ...form });\r\n      message(data.message);\r\n    } catch (e) {}\r\n  };\r\n\r\n  const loginHandler = async () => {\r\n    try {\r\n      const data = await request(\"/api/auth/login\", \"POST\", {\r\n        ...form\r\n      });\r\n      \r\n      \r\n      auth.login(data.token, data.userId);\r\n    } catch (e) {}\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col s6 offset-s3\">\r\n        <h1>Сокращатель ссылок</h1>\r\n\r\n        <div className=\"card\">\r\n          <div className=\"card-content\">\r\n            <span className=\"card-title\">Авторизация</span>\r\n            <div className=\"divider\"></div>\r\n\r\n            <div className=\"section\">\r\n              <div className=\"input-field\">\r\n                <input\r\n                  placeholder=\"Введите Email\"\r\n                  id=\"email\"\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  onChange={changeHandler}\r\n                  value={form.email}\r\n                />\r\n                <label htmlFor=\"email\">Email</label>\r\n              </div>\r\n\r\n              <div className=\"input-field\">\r\n                <input\r\n                  placeholder=\"Введите пароль\"\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  onChange={changeHandler}\r\n                  value={form.password}\r\n                />\r\n                <label htmlFor=\"password\">Пароль</label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"card-action\">\r\n            <button\r\n              className=\"btn yellow darken-4 btn-margin-right\"\r\n              disabled={loading}\r\n              onClick={loginHandler}\r\n            >\r\n              Войти\r\n            </button>\r\n            <button\r\n              className=\"btn grey lighten-1 black-text\"\r\n              disabled={loading}\r\n              onClick={registerHandler}\r\n            >\r\n              Регистрация\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { useCallback } from \"react\";\r\n\r\nexport const useMessage = () => {\r\n  return useCallback(text => {\r\n    if (window.M && text) {\r\n      window.M.toast({ html: text });\r\n    }\r\n  }, []);\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { NavLink, useHistory } from \"react-router-dom\";\r\nimport { AuthContext } from \"../context/authContext\";\r\n\r\nexport const Navbar = () => {\r\n  const auth = useContext(AuthContext);\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = e => {\r\n    e.preventDefault();\r\n    auth.logout();\r\n    history.push(\"/\");\r\n  };\r\n\r\n  return (\r\n    \r\n    <nav className=\"navbar yellow darken-4\">\r\n      <div className=\"nav-wrapper\">\r\n        <span className=\"brand-logo\">Сокращатель ссылок</span>\r\n        <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n          <li>\r\n            <NavLink to=\"/create\">Создать</NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/links\">Ссылки</NavLink>\r\n          </li>\r\n          <li>\r\n            <a href=\"/\" onClick={logoutHandler}>\r\n              Выйти\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n","import React from \"react\";\nimport \"materialize-css\";\nimport { useRoutes } from \"./routes\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { AuthContext } from \"./context/authContext\";\nimport { useAuth } from \"./hooks/auth.hook\";\nimport { Navbar } from \"./components/navBar\";\nimport { Loader } from \"./components/Loader\";\n\nfunction App() {\n  const { login, logout, token, userId, ready } = useAuth();\n  const isAuthenticated = !!token;\n  const routes = useRoutes(isAuthenticated);\n\n  if (!ready) {\n    return <Loader />;\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{ login, logout, token, userId, isAuthenticated }}\n    >\n      <Router>\n        {isAuthenticated && <Navbar />}\n        <div className=\"container\">{routes}</div>\n      </Router>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","import { useCallback, useState, useEffect } from \"react\";\r\n\r\nconst storageName = \"userData\";\r\n\r\nexport const useAuth = () => {\r\n  const [token, setToken] = useState(null);\r\n  const [ready, setReady] = useState(false)\r\n  const [userId, setUserId] = useState(null);\r\n\r\n  const login = useCallback((jwToken, id) => {\r\n    setToken(jwToken);\r\n    setUserId(id);\r\n\r\n\r\n    localStorage.setItem(\r\n      storageName,\r\n      JSON.stringify({ token: jwToken, userId: id  })\r\n    );\r\n   \r\n    \r\n  }, []);\r\n\r\n  const logout = useCallback(() => {\r\n    setToken(null);\r\n    setUserId(null);\r\n\r\n    localStorage.removeItem(storageName);\r\n  }, []);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const data = JSON.parse(localStorage.getItem(storageName));\r\n\r\n    if (data && data.token) {\r\n      login(data.token, data.userId);\r\n    }\r\n    setReady(true);\r\n  }, [login]);\r\n\r\n  return { login, logout, token, userId, ready };\r\n};\r\n","import React from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { LinksPage } from \"./pages/LinksPage\";\r\nimport { CreatePage } from \"./pages/CreatePage\";\r\nimport { DetailPage } from \"./pages/DetailPage\";\r\nimport { AuthPage } from \"./pages/AuthPage\";\r\n\r\nexport const useRoutes = isAuthenticated => {\r\n  if (isAuthenticated) {\r\n    \r\n    \r\n    return (\r\n      <Switch>\r\n        <Route path=\"/links\" exact>\r\n          <LinksPage />\r\n        </Route>\r\n        <Route path=\"/create\" exact>\r\n          <CreatePage />\r\n        </Route>\r\n        <Route path=\"/detail/:id\" exact>\r\n          <DetailPage />\r\n        </Route>\r\n        <Redirect to=\"/create\" />\r\n      </Switch>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/\" exact>\r\n        <AuthPage />\r\n      </Route>\r\n      <Redirect to=\"/\" />\r\n    </Switch>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}